{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\vsvij\\\\Desktop\\\\MERN Projects\\\\social-media\\\\components\\\\Profile\\\\Settings.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { List, Divider, Message, Checkbox, Form, Button } from \"semantic-ui-react\";\nimport { passwordUpdate, toggleMessagePopup } from \"../../utils/profileActions\";\n\nfunction Settings({\n  newMessagePopup\n}) {\n  const {\n    0: passwordFields,\n    1: showPasswordFields\n  } = useState(false);\n  const {\n    0: newMessageSettings,\n    1: showNewMessageSettings\n  } = useState(false);\n  const isFirstRun = useRef(true);\n  const {\n    0: popupSetting,\n    1: setPopupSetting\n  } = useState(newMessagePopup);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  useEffect(() => {\n    success && setTimeout(() => setSuccess(false), 3000);\n  }, [success]);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n  }, [popupSetting]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [success && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        success: true,\n        icon: \"check circle\",\n        header: \"Updated Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(List, {\n      size: \"huge\",\n      animated: true,\n      children: [/*#__PURE__*/_jsxDEV(List.Item, {\n        children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n          name: \"user secret\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n          children: /*#__PURE__*/_jsxDEV(List.Header, {\n            onClick: () => showPasswordFields(!passwordFields),\n            as: \"a\",\n            content: \"Update Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), passwordFields && /*#__PURE__*/_jsxDEV(UpdatePassword, {\n          setSuccess: setSuccess,\n          showPasswordFields: showPasswordFields\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List.Item, {\n        children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n          name: \"paper plane outline\",\n          size: \"large\",\n          verticalAlign: \"middle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n          children: /*#__PURE__*/_jsxDEV(List.Header, {\n            onClick: () => showNewMessageSettings(!newMessageSettings),\n            as: \"a\",\n            content: \"Show New Message Popup?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), newMessageSettings && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"10px\"\n          },\n          children: [\"Control whether a Popup should appear when there is a New Message or not.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: popupSetting,\n            toggle: true,\n            onChange: () => toggleMessagePopup(popupSetting, setPopupSetting, setSuccess)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nconst UpdatePassword = ({\n  setSuccess,\n  showPasswordFields\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: errorMsg,\n    1: setError\n  } = useState(null);\n  const {\n    0: userPasswords,\n    1: setUserPasswords\n  } = useState({\n    currentPassword: \"\",\n    newPassword: \"\"\n  });\n  const {\n    0: typed,\n    1: showTyped\n  } = useState({\n    field1: false,\n    field2: false\n  });\n  const {\n    field1,\n    field2\n  } = typed;\n  const {\n    currentPassword,\n    newPassword\n  } = userPasswords;\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserPasswords(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    errorMsg && setTimeout(() => setError(null), 5000);\n  }, [errorMsg]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      error: errorMsg !== null,\n      loading: loading,\n      onSubmit: async e => {\n        e.preventDefault();\n        setLoading(true);\n        await passwordUpdate(setSuccess, userPasswords);\n        setLoading(false);\n        showPasswordFields(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(List.List, {\n        children: /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            icon: {\n              name: \"eye\",\n              circular: true,\n              link: true,\n              onClick: () => showTyped(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                field1: !field1\n              }))\n            },\n            type: field1 ? \"text\" : \"password\",\n            iconPosition: \"left\",\n            label: \"Current Password\",\n            placeholder: \"Enter current Password\",\n            name: \"currentPassword\",\n            onChange: handleChange,\n            value: currentPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            icon: {\n              name: \"eye\",\n              circular: true,\n              link: true,\n              onClick: () => showTyped(prev => _objectSpread(_objectSpread({}, prev), {}, {\n                field2: !field2\n              }))\n            },\n            type: field2 ? \"text\" : \"password\",\n            iconPosition: \"left\",\n            label: \"New Password\",\n            placeholder: \"Enter New Password\",\n            name: \"newPassword\",\n            onChange: handleChange,\n            value: newPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: loading || currentPassword === \"\" || newPassword === \"\",\n            compact: true,\n            icon: \"configure\",\n            type: \"submit\",\n            color: \"teal\",\n            content: \"Confirm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: loading,\n            compact: true,\n            icon: \"cancel\",\n            type: \"button\",\n            content: \"Cancel\",\n            onClick: () => showPasswordFields(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Message, {\n            icon: \"meh\",\n            error: true,\n            header: \"Oops!\",\n            content: errorMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/vsvij/Desktop/MERN Projects/social-media/components/Profile/Settings.js"],"names":["React","useState","useEffect","useRef","List","Divider","Message","Checkbox","Form","Button","passwordUpdate","toggleMessagePopup","Settings","newMessagePopup","passwordFields","showPasswordFields","newMessageSettings","showNewMessageSettings","isFirstRun","popupSetting","setPopupSetting","success","setSuccess","setTimeout","current","marginTop","UpdatePassword","loading","setLoading","errorMsg","setError","userPasswords","setUserPasswords","currentPassword","newPassword","typed","showTyped","field1","field2","handleChange","e","name","value","target","prev","preventDefault","circular","link","onClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  List,\r\n  Divider,\r\n  Message,\r\n  Checkbox,\r\n  Form,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport { passwordUpdate, toggleMessagePopup } from \"../../utils/profileActions\";\r\n\r\nfunction Settings({ newMessagePopup }) {\r\n  const [passwordFields, showPasswordFields] = useState(false);\r\n\r\n  const [newMessageSettings, showNewMessageSettings] = useState(false);\r\n\r\n  const isFirstRun = useRef(true);\r\n  const [popupSetting, setPopupSetting] = useState(newMessagePopup);\r\n\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  useEffect(() => {\r\n    success && setTimeout(() => setSuccess(false), 3000);\r\n  }, [success]);\r\n\r\n  useEffect(() => {\r\n    if (isFirstRun.current) {\r\n      isFirstRun.current = false;\r\n      return;\r\n    }\r\n  }, [popupSetting]);\r\n\r\n  return (\r\n    <>\r\n      {success && (\r\n        <>\r\n          <Message success icon=\"check circle\" header=\"Updated Successfully\" />\r\n          <Divider hidden />\r\n        </>\r\n      )}\r\n\r\n      <List size=\"huge\" animated>\r\n        <List.Item>\r\n          <List.Icon name=\"user secret\" size=\"large\" verticalAlign=\"middle\" />\r\n          <List.Content>\r\n            <List.Header\r\n              onClick={() => showPasswordFields(!passwordFields)}\r\n              as=\"a\"\r\n              content=\"Update Password\"\r\n            />\r\n          </List.Content>\r\n\r\n          {passwordFields && (\r\n            <UpdatePassword\r\n              setSuccess={setSuccess}\r\n              showPasswordFields={showPasswordFields}\r\n            />\r\n          )}\r\n        </List.Item>\r\n        <Divider />\r\n\r\n        <List.Item>\r\n          <List.Icon\r\n            name=\"paper plane outline\"\r\n            size=\"large\"\r\n            verticalAlign=\"middle\"\r\n          />\r\n\r\n          <List.Content>\r\n            <List.Header\r\n              onClick={() => showNewMessageSettings(!newMessageSettings)}\r\n              as=\"a\"\r\n              content=\"Show New Message Popup?\"\r\n            />\r\n          </List.Content>\r\n\r\n          {newMessageSettings && (\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              Control whether a Popup should appear when there is a New Message\r\n              or not.\r\n              <br />\r\n              <br />\r\n              <Checkbox\r\n                checked={popupSetting}\r\n                toggle\r\n                onChange={() =>\r\n                  toggleMessagePopup(popupSetting, setPopupSetting, setSuccess)\r\n                }\r\n              />\r\n            </div>\r\n          )}\r\n        </List.Item>\r\n\r\n        <Divider />\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nconst UpdatePassword = ({ setSuccess, showPasswordFields }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMsg, setError] = useState(null);\r\n\r\n  const [userPasswords, setUserPasswords] = useState({\r\n    currentPassword: \"\",\r\n    newPassword: \"\",\r\n  });\r\n  const [typed, showTyped] = useState({\r\n    field1: false,\r\n    field2: false,\r\n  });\r\n\r\n  const { field1, field2 } = typed;\r\n\r\n  const { currentPassword, newPassword } = userPasswords;\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserPasswords((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    errorMsg && setTimeout(() => setError(null), 5000);\r\n  }, [errorMsg]);\r\n\r\n  return (\r\n    <>\r\n      <Form\r\n        error={errorMsg !== null}\r\n        loading={loading}\r\n        onSubmit={async (e) => {\r\n          e.preventDefault();\r\n          setLoading(true);\r\n\r\n          await passwordUpdate(setSuccess, userPasswords);\r\n          setLoading(false);\r\n\r\n          showPasswordFields(false);\r\n        }}\r\n      >\r\n        <List.List>\r\n          <List.Item>\r\n            <Form.Input\r\n              fluid\r\n              icon={{\r\n                name: \"eye\",\r\n                circular: true,\r\n                link: true,\r\n                onClick: () =>\r\n                  showTyped((prev) => ({ ...prev, field1: !field1 })),\r\n              }}\r\n              type={field1 ? \"text\" : \"password\"}\r\n              iconPosition=\"left\"\r\n              label=\"Current Password\"\r\n              placeholder=\"Enter current Password\"\r\n              name=\"currentPassword\"\r\n              onChange={handleChange}\r\n              value={currentPassword}\r\n            />\r\n\r\n            <Form.Input\r\n              fluid\r\n              icon={{\r\n                name: \"eye\",\r\n                circular: true,\r\n                link: true,\r\n                onClick: () =>\r\n                  showTyped((prev) => ({ ...prev, field2: !field2 })),\r\n              }}\r\n              type={field2 ? \"text\" : \"password\"}\r\n              iconPosition=\"left\"\r\n              label=\"New Password\"\r\n              placeholder=\"Enter New Password\"\r\n              name=\"newPassword\"\r\n              onChange={handleChange}\r\n              value={newPassword}\r\n            />\r\n\r\n            {/* BUTTONS */}\r\n\r\n            <Button\r\n              disabled={loading || currentPassword === \"\" || newPassword === \"\"}\r\n              compact\r\n              icon=\"configure\"\r\n              type=\"submit\"\r\n              color=\"teal\"\r\n              content=\"Confirm\"\r\n            />\r\n\r\n            <Button\r\n              disabled={loading}\r\n              compact\r\n              icon=\"cancel\"\r\n              type=\"button\"\r\n              content=\"Cancel\"\r\n              onClick={() => showPasswordFields(false)}\r\n            />\r\n\r\n            <Message icon=\"meh\" error header=\"Oops!\" content={errorMsg} />\r\n          </List.Item>\r\n        </List.List>\r\n      </Form>\r\n      <Divider hidden />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}